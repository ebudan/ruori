traefik:
  enabled: true
  image:
    tag: "v2.10.4"

  deployment:
    kind: DaemonSet
    replicas: 1
    podLabels: 
      # Our ns-ingress-networking rule requires this:
      networking/allow-internet-ingress: "true"

  # According to previous readings, free tier Traefik won't support
  # multi-node ingress. TODO: confirm.  
  nodeSelector: 
    node-role.kubernetes.io/master: "true"

  providers:
    kubernetesCRD:
      allowCrossNamespace: true

  # For some reason, chart produces mismatched labels for DaemonSet. 
  # Try this.
  # This value will only apply to Service and DaemonSet
  # app.kubernetes.io/instance label. This is 
  #instanceLabelOverride: "frobozz"

  # Non-nullable bug (Helm) keeps this in results. TODO:
  metrics:
    prometheus: null

  # Employ the default /data/
  persistence:
    name: traefik-data
    enabled: true
    path: /data
    # Our added volumes.yaml requires manual:
    storageClass: manual
    hostpath: /unspecified/traefik/persistence/hostpath

  # TODO: create above path on nodes!

  certResolvers:
    letsencrypt:
      email: ebu@basen.net
      tlsChallenge: true
      storage: /data/acme.json

  # ingressRoute:
  #   dashboard:
  #     enabled: false

  # ingressClass:
  #   enabled: false

  ports:
    traefik:
      port: 9000
      # -- Use hostPort if set.
      # hostPort: 9000
      #
      # -- Use hostIP if set. If not set, Kubernetes will default to 0.0.0.0, which
      # means it's listening on all your interfaces and all your IPs. You may want
      # to set this value if you need traefik to listen on specific interface
      # only.
      # hostIP: 192.168.100.10
      # Defines whether the port is exposed if service.type is LoadBalancer or
      # NodePort.
      #
      # -- You SHOULD NOT expose the traefik port on production deployments.
      # If you want to access it from outside your cluster,
      # use `kubectl port-forward` or create a secure ingress
      expose: false
      # -- The exposed port for this service
      exposedPort: 9000
      # -- The port protocol (TCP/UDP)
      protocol: TCP
    web:
      ## -- Enable this entrypoint as a default entrypoint. When a service doesn't explicitly set an entrypoint it will only use this entrypoint.
      # asDefault: true
      port: 8000
      # hostPort: 8000
      # containerPort: 8000
      expose: true
      exposedPort: 80
      ## -- Different target traefik port on the cluster, useful for IP type LB
      # targetPort: 80
      # The port protocol (TCP/UDP)
      protocol: TCP
      # -- Use nodeport if set. This is useful if you have configured Traefik in a
      # LoadBalancer.
      # nodePort: 32080
      # Port Redirections
      # Added in 2.2, you can make permanent redirects via entrypoints.
      # https://docs.traefik.io/routing/entrypoints/#redirection
      # redirectTo: websecure
      #
      # Trust forwarded  headers information (X-Forwarded-*).
      # forwardedHeaders:
      #   trustedIPs: []
      #   insecure: false
      #
      # Enable the Proxy Protocol header parsing for the entry point
      # proxyProtocol:
      #   trustedIPs: []
      #   insecure: false
    websecure:
      ## -- Enable this entrypoint as a default entrypoint. When a service doesn't explicitly set an entrypoint it will only use this entrypoint.
      # asDefault: true
      port: 8443
      # hostPort: 8443
      # containerPort: 8443
      expose: true
      exposedPort: 443
      ## -- Different target traefik port on the cluster, useful for IP type LB
      # targetPort: 80
      ## -- The port protocol (TCP/UDP)
      protocol: TCP
      # nodePort: 32443
      ## -- Specify an application protocol. This may be used as a hint for a Layer 7 load balancer.
      # appProtocol: https
      #
      ## -- Enable HTTP/3 on the entrypoint
      ## Enabling it will also enable http3 experimental feature
      ## https://doc.traefik.io/traefik/routing/entrypoints/#http3
      ## There are known limitations when trying to listen on same ports for
      ## TCP & UDP (Http3). There is a workaround in this chart using dual Service.
      ## https://github.com/kubernetes/kubernetes/issues/47249#issuecomment-587960741
      http3:
        enabled: false
      # advertisedPort: 4443
      #
      ## -- Trust forwarded  headers information (X-Forwarded-*).
      #forwardedHeaders:
      #  trustedIPs: []
      #  insecure: false
      #
      ## -- Enable the Proxy Protocol header parsing for the entry point
      #proxyProtocol:
      #  trustedIPs: []
      #  insecure: false
      #
      ## Set TLS at the entrypoint
      ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
      tls:
        enabled: true
        # this is the name of a TLSOption definition
        options: "default"
        certResolver: "letsencrypt"
        domains: []
        # - main: example.com
        #   sans:
        #     - foo.example.com
        #     - bar.example.com
      #
      # -- One can apply Middlewares on an entrypoint
      # https://doc.traefik.io/traefik/middlewares/overview/
      # https://doc.traefik.io/traefik/routing/entrypoints/#middlewares
      # -- /!\ It introduces here a link between your static configuration and your dynamic configuration /!\
      # It follows the provider naming convention: https://doc.traefik.io/traefik/providers/overview/#provider-namespace
      # middlewares:
      #   - namespace-name1@kubernetescrd
      #   - namespace-name2@kubernetescrd
      middlewares: []
    metrics:
      # -- When using hostNetwork, use another port to avoid conflict with node exporter:
      # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
      port: 9100
      # hostPort: 9100
      # Defines whether the port is exposed if service.type is LoadBalancer or
      # NodePort.
      #
      # -- You may not want to expose the metrics port on production deployments.
      # If you want to access it from outside your cluster,
      # use `kubectl port-forward` or create a secure ingress
      expose: false
      # -- The exposed port for this service
      exposedPort: 9100
      # -- The port protocol (TCP/UDP)
      protocol: TCP
    mqtt:
      expose: true
      pass: true
      port: 8883
      exposedPort: 8883
      # hostPort: 8883
      # containerPort: 8883
      protocol: TCP
    autentica:
      expose: true
      pass: true
      port: 9443
      exposedPort: 9443
      # hostPort: 9443
      # containerPort: 9443
      protocol: TCP

  # EB: entirely possible we don't need customOptions. 
  tlsOptions:
    default:
      labels: {}
      sniStrict: true
      preferServerCipherSuites: true
  #  customOptions:
  #    labels: {}
  #    curvePreferences:
  #      - CurveP521
  #      - CurveP384
  #    minVersion: VersionTLS512
  #    cipherSuites:
  #    - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
  #    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
  #    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
  #    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
  #    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  #    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
  #    - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  #    - TLS_AES_256_GCM_SHA384
  #    - TLS_AES_128_GCM_SHA256
  #    - TLS_CHACHA20_POLY1305_SHA256
  #    - TLS_FALLBACK_SCSV

  rbac:
    enabled: true
    namespaced: false
